{"version":3,"file":"static/js/169.89812e6e.chunk.js","mappings":"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","sources":["components/Forms/LoginForm/validation.js","components/Forms/LoginForm/index.js","components/LoginPageComponent/index.js","pages/LoginPage/index.js"],"sourcesContent":["import * as yup from \"yup\";\r\n\r\nexport const loginSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email(\"Email must be a valid email!\")\r\n    .required(\"Email is required!\"),\r\n  password: yup.string().required(\"Password is required!\"),\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Form, Formik } from \"formik\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nimport { loginSchema } from \"./validation\";\r\nimport { useLoginMutation } from \"../../../services/API\";\r\nimport { saveUserInfo } from \"../../../redux/auth\";\r\nimport { setError } from \"../../../redux/error\";\r\n\r\nconst FormWrap = styled(Box)(() => ({\r\n  width: \"400px\",\r\n  padding: \"20px\",\r\n  boxSizing: \"border-box\",\r\n  border: \"1px solid #1976d2\",\r\n  borderRadius: \"6px\",\r\n  backgroundColor: \"white\",\r\n}));\r\n\r\nconst FormField = styled(Box)(() => ({\r\n  width: \"100%\",\r\n  marginBottom: \"10px\",\r\n}));\r\n\r\nconst Label = styled(InputLabel)(() => ({\r\n  marginBottom: \"5px\",\r\n  color: \"black\",\r\n  fontSize: \"16px\",\r\n  fontWeight: \"bold\",\r\n}));\r\n\r\nconst Input = styled(OutlinedInput)(() => ({\r\n  width: \"100%\",\r\n\r\n  \"& .css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\": {\r\n    padding: \"5px 10px\",\r\n  },\r\n  \"& .css-nxo287-MuiInputBase-input-MuiOutlinedInput-input\": {\r\n    padding: \"5px 10px\",\r\n  },\r\n}));\r\n\r\nconst StyledCheckbox = styled(Checkbox)(() => ({\r\n  padding: 0,\r\n  marginRight: \"5px\",\r\n}));\r\n\r\nconst StyledFormControlLabel = styled(FormControlLabel)(() => ({\r\n  marginLeft: 0,\r\n}));\r\n\r\nconst ManageBlock = styled(Box)(() => ({\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n}));\r\n\r\nconst HelperText = styled(Typography)(() => ({\r\n  fontSize: \"10px\",\r\n  color: \"red\",\r\n}));\r\n\r\nconst LoginForm = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [login] = useLoginMutation();\r\n  const dispatch = useDispatch();\r\n  const handleMouseDownPassword = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const submitForm = async (values) => {\r\n    dispatch(setError(null));\r\n    try {\r\n      const response = await login(values);\r\n      dispatch(saveUserInfo(response.data));\r\n      if (values.rememberMe) {\r\n        localStorage.setItem(\"token\", response.data.access_token);\r\n      }\r\n    } catch (error) {\r\n      dispatch(setError(\"Internal server error. Please try again later\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormWrap>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: true,\r\n        }}\r\n        validationSchema={loginSchema}\r\n        onSubmit={submitForm}\r\n      >\r\n        {({\r\n          values: { email, password, rememberMe },\r\n          setFieldValue,\r\n          errors,\r\n          touched,\r\n        }) => (\r\n          <Form>\r\n            <FormField>\r\n              <Label htmlFor=\"email\">Email</Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"text\"\r\n                error={errors.email && touched.email}\r\n                value={email}\r\n                placeholder={\"Enter your email\"}\r\n                onChange={(e) => setFieldValue(\"email\", e.target.value)}\r\n              />\r\n              {errors.email && touched.email ? (\r\n                <HelperText>{errors.email}</HelperText>\r\n              ) : null}\r\n            </FormField>\r\n            <FormField>\r\n              <Label htmlFor=\"password\">Password</Label>\r\n              <Input\r\n                id=\"password\"\r\n                error={errors.password && touched.password}\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={password}\r\n                placeholder={\"Enter your password\"}\r\n                onChange={(e) => setFieldValue(\"password\", e.target.value)}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowPassword}\r\n                      onMouseDown={handleMouseDownPassword}\r\n                      edge=\"end\"\r\n                    >\r\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n              {errors.password && touched.password ? (\r\n                <HelperText>{errors.password}</HelperText>\r\n              ) : null}\r\n            </FormField>\r\n            <ManageBlock>\r\n              <StyledFormControlLabel\r\n                control={\r\n                  <StyledCheckbox\r\n                    size=\"small\"\r\n                    checked={rememberMe}\r\n                    onChange={() => setFieldValue(\"rememberMe\", !rememberMe)}\r\n                  />\r\n                }\r\n                label=\"Remember me\"\r\n              />\r\n              <Button type=\"submit\" variant=\"contained\">\r\n                Login\r\n              </Button>\r\n            </ManageBlock>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </FormWrap>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport LoginForm from \"../Forms/LoginForm\";\r\n\r\nconst PageWrap = styled(Box)(() => ({\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  height: \"100vh\",\r\n  backgroundColor: \"#1976d2\",\r\n}));\r\n\r\nconst LoginPageComponent = () => {\r\n  return (\r\n    <PageWrap>\r\n      <LoginForm />\r\n    </PageWrap>\r\n  );\r\n};\r\n\r\nexport default LoginPageComponent;\r\n","import React from \"react\";\r\n\r\nimport LoginPageComponent from \"../../components/LoginPageComponent\";\r\n\r\nconst LoginPage = () => {\r\n  return <LoginPageComponent />;\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["loginSchema","yup","shape","email","required","password","FormWrap","styled","Box","width","padding","boxSizing","border","borderRadius","backgroundColor","FormField","marginBottom","Label","InputLabel","color","fontSize","fontWeight","Input","OutlinedInput","StyledCheckbox","Checkbox","marginRight","StyledFormControlLabel","FormControlLabel","marginLeft","ManageBlock","display","justifyContent","HelperText","Typography","useState","showPassword","setShowPassword","useLoginMutation","login","dispatch","useDispatch","handleMouseDownPassword","e","preventDefault","handleClickShowPassword","submitForm","values","setError","response","saveUserInfo","data","rememberMe","localStorage","setItem","access_token","initialValues","validationSchema","onSubmit","setFieldValue","errors","touched","htmlFor","id","type","error","value","placeholder","onChange","target","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","control","size","checked","label","Button","variant","PageWrap","alignItems","height"],"sourceRoot":""}